#version 400 core

in vec4 clipSpace;
in vec2 textureCoordinates;
in vec3 toCameraVector;
in vec3 fromLightVector;

out vec4 out_Color;

uniform sampler2D reflectionTexture;
uniform sampler2D refractionTexture;
uniform sampler2D dudvMap;
uniform sampler2D normalMap;
uniform sampler2D depthMap;
uniform vec3 lightColour;

uniform float moveFactor;

const float waveStrength = 0.04;
const float shineDamper = 20.0;
const float reflectivity = 0.5;

void main(void) {

    vec2 normalizedDeviceClip = (clipSpace.xy/clipSpace.w)/2.0 + 0.5;
    vec2 refractionTextureCoordinates = vec2(normalizedDeviceClip.x, normalizedDeviceClip.y);
    vec2 reflectionTextureCoordinates = vec2(normalizedDeviceClip.x, -normalizedDeviceClip.y);

    float near = 0.1;
    float far = 1000.0;
    float depth = texture(depthMap, refractionTextureCoordinates).r;
    float floorDistance = 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));

    depth = gl_FragCoord.z;
    float waterDistance = 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));
    float waterDepth = floorDistance - waterDistance;

    vec2 distortedTextureCoordinates = texture(dudvMap, vec2(textureCoordinates.x + moveFactor, textureCoordinates.y)).rg*0.1;
    distortedTextureCoordinates = textureCoordinates + vec2(distortedTextureCoordinates.x, distortedTextureCoordinates.y+moveFactor);
    vec2 totalDistortion = (texture(dudvMap, distortedTextureCoordinates).rg * 2.0 - 1.0) * waveStrength * clamp(waterDepth/20.0, 0.0, 1.0);

    refractionTextureCoordinates += totalDistortion;
    refractionTextureCoordinates = clamp(refractionTextureCoordinates, 0.001, 0.999);

    reflectionTextureCoordinates += totalDistortion;
    reflectionTextureCoordinates.x = clamp(reflectionTextureCoordinates.x, 0.001, 0.999);
    reflectionTextureCoordinates.y = clamp(reflectionTextureCoordinates.y, -0.999, -0.001);

    vec4 reflectionColour = texture(reflectionTexture, reflectionTextureCoordinates);
    vec4 refractionColour = texture(refractionTexture, refractionTextureCoordinates);

    vec4 normalMapColour = texture(normalMap, distortedTextureCoordinates);
    vec3 normal = vec3(normalMapColour.r * 2.0 - 1.0, normalMapColour.b * 3, normalMapColour.g * 2.0 - 1.0);
    normal = normalize(normal);

    vec3 viewVector = normalize(toCameraVector);
    float refractiveFactor = dot(viewVector, normal);
    refractiveFactor = pow(refractiveFactor, 0.8);

    vec3 reflectedLight = reflect(normalize(fromLightVector), normal);
    float specular = max(dot(reflectedLight, viewVector), 0.0);
    specular = pow(specular, shineDamper);
    vec3 specularHighlights = lightColour * specular * reflectivity * clamp(waterDepth/5.0, 0.0, 1.0);

    reflectionColour += vec4(specularHighlights, 0.0);
	out_Color = mix(reflectionColour, refractionColour, refractiveFactor);
    out_Color = mix(out_Color, vec4(0.0, 0.3, 0.5, 1.0), 0.2);
    out_Color.a = clamp(waterDepth/6.0, 0.0, 1.0);
}